<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CSS &amp; Projects]]></title>
  <link href="http://Marekje.github.io/atom.xml" rel="self"/>
  <link href="http://Marekje.github.io/"/>
  <updated>2014-09-12T10:03:58+02:00</updated>
  <id>http://Marekje.github.io/</id>
  <author>
    <name><![CDATA[Marekje]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS Namespacing and Efficiency]]></title>
    <link href="http://Marekje.github.io/blog/2014/09/12/quote-from-trello-css/"/>
    <updated>2014-09-12T09:55:52+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/09/12/quote-from-trello-css</id>
    <content type="html"><![CDATA[<blockquote><p>So you may think everything is all-good-thumbs-up when you write <code>.foo div</code> because there are only a few <code>.foos</code>, but actually <strong>you are asking the browser to look up all the tens of millions of <code>divs</code> first</strong>, then all the <code>.foos</code> and exponentially more with more descendant selectors. Yipes. For more, check out the CSS Tricks article about efficiently rendering CSS.</p></blockquote>

<p><em>From : <a href="http://blog.trello.com/refining-the-way-we-structure-our-css-at-trello/">Trello&rsquo;s blog : refining the way we structure our CSS</a></em>
<em>The -Must Read- CSS-Tricks article mentionned : <a href="http://css-tricks.com/efficiently-rendering-css/">CSS-Tricks : Efficiently rendering CSS</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Without Classes : The Attributes Module]]></title>
    <link href="http://Marekje.github.io/blog/2014/09/06/css-without-classes-attributes-module/"/>
    <updated>2014-09-06T15:36:28+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/09/06/css-without-classes-attributes-module</id>
    <content type="html"><![CDATA[<p>Yesterday, Glenn Maddern introduced a new concept for styling HTML websites : the <a href="http://glenmaddern.com/articles/introducing-am-css">Attributes Modules</a>. His explanation being very thorough and well-written, you should read it first.</p>

<p>I used it today for a small pen about language learning card :</p>

<p>The HTML uses attributes (starting with <code>am-attribute</code> so I know it&rsquo;s part of this module, it&rsquo;s very much like Angular&rsquo;s <code>ng-stuff</code>) instead of classes.</p>

<h3>The code :</h3>

<p>Here I have three modules :</p>

<ul>
<li><strong>Card :</strong> <code>am-Card</code> to style Cards in general</li>
<li><strong>Lang :</strong> <code>am-Lang</code> to make sure the user can recognize pinyin (latin-characters chinese) at a glance for example.</li>
<li><strong>Question :</strong> <code>am-Question</code>, which will hide and show blocks of text, so the user has to guess them.</li>
</ul>


<p>The HTML template for my Card :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;article</span> <span class="na">am-Card</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p</span> <span class="na">am-Lang=</span><span class="s">&quot;chinese&quot;</span><span class="nt">&gt;</span>我<span class="nt">&lt;em</span> <span class="na">am-Question=</span><span class="s">&quot;hidden&quot;</span><span class="nt">&gt;</span>刻<span class="nt">&lt;/em&gt;</span>一个铁剑。<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p</span> <span class="na">am-Lang=</span><span class="s">&quot;pinyin&quot;</span><span class="nt">&gt;</span>wǒ <span class="nt">&lt;em</span> <span class="na">am-Question=</span><span class="s">&quot;hidden&quot;</span><span class="nt">&gt;</span>kè<span class="nt">&lt;/em&gt;</span> yī ge tiě jiàn.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p</span> <span class="na">am-Lang=</span><span class="s">&quot;english&quot;</span><span class="nt">&gt;</span>I <span class="nt">&lt;em</span> <span class="na">am-Question=</span><span class="s">&quot;none&quot;</span><span class="nt">&gt;</span>sculpt<span class="nt">&lt;/em&gt;</span> one iron sword<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/article&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The CSS I use :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* CARD module */</span>
</span><span class='line'><span class="o">[</span><span class="nt">am-Card</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* Basic CSS stuff about Cards*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* QUESTION module */</span>
</span><span class='line'><span class="c">/* stuff about Questions that won&#39;t change if I apply a modifier */</span>
</span><span class='line'><span class="o">[</span><span class="nt">am-Question</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-style</span><span class="o">:</span> <span class="k">inherit</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.1em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c">/* Questions with &quot;shown&quot; state will have a sliiight background color</span>
</span><span class='line'><span class="c">   to know it&#39;s been revealed */</span>
</span><span class='line'><span class="o">[</span><span class="nt">am-Question</span><span class="o">~=</span><span class="s2">&quot;shown&quot;</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="n">rgba</span><span class="p">(</span><span class="err">$</span><span class="k">color</span><span class="o">-</span><span class="k">hidden</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">transition</span><span class="o">:</span> <span class="n">all</span> <span class="m">0.1s</span> <span class="n">ease</span><span class="o">-</span><span class="n">in</span><span class="o">-</span><span class="n">out</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c">/* Questions with &quot;hidden&quot; state will have the same background-color</span>
</span><span class='line'><span class="c">   and color to hide them ! I&#39;m quoite proud of this trick :P */</span>
</span><span class='line'><span class="o">[</span><span class="nt">am-Question</span><span class="o">~=</span><span class="s2">&quot;hidden&quot;</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="err">$</span><span class="k">color</span><span class="o">-</span><span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="err">$</span><span class="k">color</span><span class="o">-</span><span class="k">hidden</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pro&rsquo;s and Con&rsquo;s</h3>

<ul>
<li>You never have to worry about two <code>.hidden</code>classes with different behaviors.</li>
<li>You won&rsquo;t have huge <code>Card__Question--hidden</code> classes like BEM does, because each module has its own attribute (avoids Global Namespace !).</li>
<li>Since all your attributes have meaning, I think we can use the same attributes for CSS and JS. The attribute only shows an information, CSS and JS can do whatever they want afterwards.</li>
<li>But it&rsquo;s not very pretty to have <code>[am-Question~="shown"]</code> everywhere in your css&hellip;</li>
</ul>


<h3>The full Pen :</h3>

<p data-height="448" data-theme-id="2183" data-slug-hash="xwoFz" data-default-tab="result" data-user="Marekje" class='codepen'>See the Pen <a href='http://codepen.io/Marekje/pen/xwoFz/'>Hide some text</a> by Pierre (<a href='http://codepen.io/Marekje'>@Marekje</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fibonacci, SCSS and Typography]]></title>
    <link href="http://Marekje.github.io/blog/2014/08/31/fibonacci/"/>
    <updated>2014-08-31T14:01:47+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/08/31/fibonacci</id>
    <content type="html"><![CDATA[<p>I just wrote <a href="http://codepen.io/Marekje/blog/a-typographic-grid-with-fibonacci-and-sass">an article on codepen</a>, talking about typographic scale and using the Fibonacci sequence as a SASS function to define this scale.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start of a Design Workflow]]></title>
    <link href="http://Marekje.github.io/blog/2014/08/29/start-of-a-design-workflow/"/>
    <updated>2014-08-29T08:41:23+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/08/29/start-of-a-design-workflow</id>
    <content type="html"><![CDATA[<h4>Plan</h4>

<p>When you get a new assignement for a design work,  talk about it with its <em>Product Owner</em>. He will always have ideas and insights, data, people you should talk to&hellip;</p>

<h4>Do</h4>

<p>Then, write down your first ideas, sketches, make a basic report with the &ldquo;State of the art&rdquo;, existing functionalities and dreamed ones&hellip; It will help you define what your design needs to work.</p>

<h4>Check</h4>

<p>Do you have all your design functionalities ? Do you know who&rsquo;s the final user ? Is there a hidden product owner somewhere you haven&rsquo;t talked to (You know, your boss&rsquo;s boss) ?</p>

<h4>Act</h4>

<p>At this point, define if you can start the actual designing work or if you need more informations.</p>

<p>For more generic informations :
&ndash;> (PDCA : The Deming wheel) [<a href="http://en.wikipedia.org/wiki/PDCA">http://en.wikipedia.org/wiki/PDCA</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Smooth Buttons System in CSS]]></title>
    <link href="http://Marekje.github.io/blog/2014/08/17/a-smooth-buttons-system-in-css/"/>
    <updated>2014-08-17T16:00:36+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/08/17/a-smooth-buttons-system-in-css</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve made a system of buttons for an application I&rsquo;m creating right now. I don&rsquo;t dislike flat design, but it always bugged me that buttons would be so&hellip; bland.</p>

<p>So I&rsquo;ve made a simple buttons system easy to improve so I can add what I need later on:</p>

<p data-height="268" data-theme-id="2183" data-slug-hash="lIwzn" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/Marekje/pen/lIwzn/'>Smooth buttons system</a> by Pierre (<a href='http://codepen.io/Marekje'>@Marekje</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p>The github Gist : <a href="https://gist.github.com/Marekje/58e8c9103af720e71905">Gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Web Typography : Excerpts]]></title>
    <link href="http://Marekje.github.io/blog/2014/08/16/on-web-typography-excerpts/"/>
    <updated>2014-08-16T11:19:00+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/08/16/on-web-typography-excerpts</id>
    <content type="html"><![CDATA[<p>Jason Santa Maria wrote a book called <a href="http://www.abookapart.com/products/on-web-typography"><em>On Web Typography</em></a>. I&rsquo;m reading it and adding here the stuff I want to remember.</p>

<h3>The CSS <em>em</em></h3>

<blockquote><p>“The em is the available height of each character’s canvas” (page 28)</p></blockquote>

<p>Okay, how does <code>line-height: 1em</code> looks like then ?</p>

<div data-height="268" data-theme-id="2183" data-slug-hash="ltEcJ" data-default-tab="result" class='codepen'><pre><code>body {
  background-color: #eee;
}
p {
  font-family: Verdana, sans-serif;
  font-size: 3rem; //set the &#39;em&#39; default
  max-width: 10em; //I make sure I have at least two lines
  line-height: 1em;
}
span {
  background-color: rgba(0, 0, 0, 0.3);
  outline: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 3px;
}</code></pre>
<p>See the Pen <a href='http://codepen.io/Marekje/pen/ltEcJ/'>What is a 1em line-height ?</a> by Pierre (<a href='http://codepen.io/Marekje'>@Marekje</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
</div>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p>So, <code>line-height: 1em</code> means that a <em>q</em> with a <em>l</em> under are going to touch each other.</p>

<h3>What does <code>font-weight: 400</code> means?</h3>

<p data-height="299" data-theme-id="2183" data-slug-hash="AfkKv" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/Marekje/pen/AfkKv/'>What does `font-weight: 400` means ?</a> by Pierre (<a href='http://codepen.io/Marekje'>@Marekje</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p>Hey, Helvetica has <em>three weights</em> ! One for titles, one for text and one for emphasis, which means I could make an entire website with it. Maybe it overused though&hellip;</p>

<p>On page 51, Santa Maria tells us he likes <em>Chaparral</em>. <a href="https://typekit.com/fonts/chaparral-pro">Lets look at it !</a>. Woaow, four weights ! 300, 400, 600 and 700. Plus, I really like its feeling&hellip;</p>

<h2>How to choose a font :</h2>

<ul>
<li><p><em>Type for a moment</em></p>

<blockquote><p>For navigation or interface text, I look for typefaces that hold up well at small sizes. [A] simple sans serif. [he promotes] JAF Facit.</p></blockquote></li>
<li><p><em>Type to live with</em></p></li>
</ul>


<p>(The screenshot on page 63 is a gorgeous page of text !)</p>

<blockquote><p>Typefaces for longer reading should give a page an even texture (p62)</p></blockquote>

<p>&ndash;> Not too much personality, specific features that sets the font apart from it peers.</p>

<p><em>“Sufficient x-height”<br/>“Low or medium contrast”<br/>“recognizable and distinct letterforms”</em><br/>&ndash;> For body text, use a high <code>x-height</code>, it gives more space to the character, thus giving more space to convey the information (the letter shape).</p>

<p>&ndash;> Use lowercase numerals, because they integrate better with the text. Uppercase numerals would look like bold text.</p>

<ul>
<li><em>Methods for choosing typeface</em></li>
</ul>


<p>Word association, comparison of real text, appropriateness</p>

<blockquote><p>Proxima Nova&rsquo;s straight lines contrast perfectly with the Mighty logo&rsquo;s script lettering.</p></blockquote>

<p>&ndash;> <a href="http://fontsinuse.com/">fontsinuse.com</a> A website showing diverse fonts in the real world (even some chinese characters !).</p>

<blockquote><p>Avoid ready-mades. (p.74)</p>

<p>Be careful with free fonts. (p.75)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress/Github Pages : Create a New Blog Post]]></title>
    <link href="http://Marekje.github.io/blog/2014/08/15/octopress-create-a-new-blog-post/"/>
    <updated>2014-08-15T13:19:51+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/08/15/octopress-create-a-new-blog-post</id>
    <content type="html"><![CDATA[<h4>Open your terminal :</h4>

<ul>
<li><p><code>cd Sites/marekje.github.io //use tabs to go faster</code></p></li>
<li><p><code>rvm install ruby-2.1.1</code> &ndash;> because my computer always seems to go back to an older version. It will tell it&rsquo;s installed, that&rsquo;s normal</p></li>
<li><p><code>rake new_post['The name of your brand new Post']</code></p></li>
</ul>


<h4>Open a new terminal tab :</h4>

<ul>
<li><code>jekyll serve</code> &ndash;> useful to see your post in local. follow their instructions. Open a new terminal tab</li>
<li><p><code>rake generate</code> &ndash;> each time you want to see your local blog post.</p></li>
<li><p>Put categories &amp; write your post.</p></li>
</ul>


<h4>When it&rsquo;s ready :</h4>

<ul>
<li><code>rake generate</code></li>
<li><code>rake deploy</code>
&ndash;> It will ask for your github username/password.</li>
<li>It&rsquo;s on the web !</li>
</ul>


<p>That&rsquo;s all :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Card Sizing for Different Uses]]></title>
    <link href="http://Marekje.github.io/blog/2014/08/10/easy-card-sizing-for-different-uses/"/>
    <updated>2014-08-10T13:46:35+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/08/10/easy-card-sizing-for-different-uses</id>
    <content type="html"><![CDATA[<p>When they learn a language by themselves, most people use paper or cardboard cards for easy vocabulary learning. They go through them as often as possible, trying to find systems to see them nore often when they don;t know it, and less often when it&rsquo;s in their long-term memory.</p>

<p>Today, computer softwares like Anki or Memrise do it for you, using Spaced Repetition System (look it up).</p>

<p>But that&rsquo;s not today&rsquo;s point. Sometimes you want to see cards one by one so you can learn them from your phone in a moving subway, other times all of them on your huge desktop screen to sort through them.</p>

<p>So I needed a way to easily change the cards size without much code :</p>

<p data-height="350" data-theme-id="2183" data-slug-hash="GLidk" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/Marekje/pen/GLidk/'>Cards & Sizes</a> by Pierre (<a href='http://codepen.io/Marekje'>@Marekje</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p>Look at the three first lines of CSS : That&rsquo;s all you need, <strong>the whole card changes according to that setting !</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Pendant Un Sprint]]></title>
    <link href="http://Marekje.github.io/blog/2014/08/05/design-during-a-sprint/"/>
    <updated>2014-08-05T13:26:07+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/08/05/design-during-a-sprint</id>
    <content type="html"><![CDATA[<p>Je me demandais comment gérer le design manquant durant un Sprint. les modifications dues au développement, aux nouvelles idées, aux problèmes techniques.. font que le design d&#8217;un projet change au fur et à mesure du temps.
J&#8217;ai donc eu besoin de trouver et développer une méthode pour intégrer le design dans un sprint normal, et le faire évoluer au même rythme que le développement, par itérations successives.
Et je l&#8217;écris ici pour ne pas l&#8217;oublier !</p>

<h2>2 étapes</h2>

<p><strong>Avant le début du développement</strong>, il faut :</p>

<ul>
<li>Une “Charte graphique”, document qui contient les couleurs et leur usage (background, texte, titres, alertes, légendes…), les polices de paragraphe, titre, lien… , les textures, le rendu attendu en fonction des endroits (menus, articles, widgets…).</li>
</ul>


<p>Chaque exemple comprend un graphisme, une explication de l’objectif du graphisme et des endroits auquels il est attendu , ansi que le CSS nécessaire (grâce à une mixin SCSS/LESS si possible)</p>

<ul>
<li>Une “Charte des Interactions”, qui décrit les principales possibilités d’action des utilisateurs lors de l’utilisation de ce projet, étape par étape.</li>
</ul>


<p>Chaque exemple comprend un workflow de l’interaction et ses transitions, une explication du résultat attendu par l’utilisateur et le code basique nécessaire pour faire fonctionner l’interaction si possible.</p>

<ul>
<li>Une “Charte Technique” décrivant les langages, librairies et technologies front-end &amp; back-end utilisées.</li>
</ul>


<p><strong>Pendant le sprint</strong>, on commence par un Sprint Planning Meeting qui décrit les tâches à réaliser par l&#8217;équipe. C&#8217;est durant cette phase que tout se joue.</p>

<ul>
<li><p>Les tâches qui ont besoin d&#8217;un redesign ou d&#8217;une description plus complête vont être assignées au designer, qui va créer un document explicatif rapide pour chacune, l&#8217;ajouter sur la tâche, puis les assignera aux développeurs par la suite.</p></li>
<li><p>Le designer va regarder les autres tâches, et y noter les documents de design utiles pour la réalisation de la tâche.</p></li>
</ul>


<p>De cette manière, un développeur pourra se référer uniquement au descriptif de la tâche pour réaliser son travail !</p>

<h2>Qu&#8217;est-ce que ça donne concrètement ?</h2>

<p>J&#8217;utilise Trello, qui permet de faire ça facilement :</p>

<p><em>La Card assignée au Designer :</em></p>

<p><img src="../images/designercard_before.jpg" alt="une Card Trello avant que le designer n'y ajoute sa patte" /></p>

<p><em>La Card une fois le designer passé : (notez le changement de [design] à [dev])</em></p>

<p><img src="../images/designercard_after.jpg" alt="une Card Trello après le passage du designer" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrum Workflows : Development and Testing]]></title>
    <link href="http://Marekje.github.io/blog/2014/07/24/scrum-workflows-development-and-testing/"/>
    <updated>2014-07-24T08:47:37+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/07/24/scrum-workflows-development-and-testing</id>
    <content type="html"><![CDATA[<p>At work, we use <em>Scrum</em>. An agile methodologie where you make one-week increments to your project. Each increment is build with enough <em>user-stories</em> to fill a week of development (look for <a href="">velocity</a> in this very blog).</p>

<p>Developers are obviously important in this process, as they build the project. While important, you could reduce their project management part to two workflows.</p>

<p>The main one is the <strong>Development workflow</strong> :</p>

<h3>Development workflow :</h3>

<p>The developer looks for the next Card he has to do in the Sprint Backlog. He puts the card in <code>Implementation</code>, and work on it.
Once finished, he pushes the card in <code>Implementation done</code> (A tester is going to take it, but it does not really matter for the developer).</p>

<p>The second worflow is not meant only for developers, but rather for everyone on board :</p>

<h3><em>“I got an idea”</em> workflow</h3>

<p>When someone has an idea, he writes it down in the <em>Product Backlog</em>. If possible, he should write it as a user-story, telling the story of someone achieving an action using the project.</p>

<blockquote><p>As a user, I want to rank lists according to their importance because it will help me prioritize them for the next iteration.
<em>A user-story, from the viewpoint of a user</em></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficient Language Learning]]></title>
    <link href="http://Marekje.github.io/blog/2014/07/23/most-used-hanzis/"/>
    <updated>2014-07-23T12:10:14+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/07/23/most-used-hanzis</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m lazy.</em></p>

<p>Someone said <a href="http://blogoscoped.com/archive/2005-08-24-n14.html"><em>&ldquo;Good developers are lazy&rdquo;</em></a>. I think it could be applied to language learning.</p>

<p>I&rsquo;m learning chinese. Which is one of the worst languages to pick if you&rsquo;re not chinese. <strong>2200 hours</strong> of learning, when italian or english would require 600 hours !</p>

<p>So, in order to read texts in Chinese without learning all the characters (汉字 － <em>hanzi</em> ： character), I wanted to know which characters appeared the most in a given text, learn them and <strong>get most of the text for a minimal amount of work.</strong></p>

<p>I thus decided to develop this small script (which has the side effect of improving my feeble JS skills) :</p>

<p data-height="268" data-theme-id="2183" data-slug-hash="xDLlK" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/Marekje/pen/xDLlK/'>Get the most used characters in a text</a> by Pierre (<a href='http://codepen.io/Marekje'>@Marekje</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p>How-to : Change the text in the <code>id="text"</code>, in the HTML tab, , and automagically see which characters occurs most often.</p>

<p>It was fun to do ! Now I need to use my design skills and make that more user-friendly :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Velocity in Scrum]]></title>
    <link href="http://Marekje.github.io/blog/2014/07/21/velocity/"/>
    <updated>2014-07-21T09:05:06+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/07/21/velocity</id>
    <content type="html"><![CDATA[<p><strong>Scrum</strong> has a method called <code>Velocity</code>. Its goal is to predict the speed of your team for the next <em>Sprint</em>.</p>

<p>First, you calculate how many man-hours you will have this week. Lets say, 30 hours.
Second, you predict how much time each story is gonna take, and write it on the Card like that (in Trello):</p>

<p><img src="../images/scrum_velocity.jpg" title="A Trello Card with velocity as a simple number between brackets" alt="A Trello Card with velocity" /></p>

<p>I personally use <code>[0]</code> for 20 minutes, and then <code>[1]</code> to <code>[5]</code>, respectively 1 to 5 hours <em>(or more than five, but you should break user-stories that take more than 2 hours anyway)</em>.</p>

<p>Once you&rsquo;ve done that for each Card in the product backlog, you take as any Cards as you can, given your available man-hours.</p>

<p>What&rsquo;s interesting now is to compare during the sprint how much time you still have and how many Cards you have left. You can then predict if you&rsquo;ll finish the sprint or not.</p>

<p>And at the end of the sprint, you will know how many man-hours you can really achieve, and be more accurate in the number of Cards for the next sprint.</p>

<h2>Burndown Charts</h2>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/8/8c/Burn_down_chart.png" title="a chart : left axis is sum-of-task-estimates, bottom axis is iteration-timeline. the line goes from top left to right bottom" alt="A Burndown chart" />
For easy comparing, Scrum recommends <a href="https://en.wikipedia.org/wiki/Burn_down_chart">Burndown Charts</a> drawing this chart everyday helps you see the ideal sprint (blue) and your sprint (red).</p>

<h2>Wikipedia&rsquo;s links :</h2>

<ul>
<li><p><a href="http://idiacomputing.com/pub/BetterSoftware-BurnCharts.pdf">A good .pdf about burndown charts</a></p>

<blockquote><p>&ldquo;suppose I start work on time but then go for coffee while waiting for my computer to boot up&rdquo;</p></blockquote></li>
<li><p><a href="http://www.mountaingoatsoftware.com/agile/scrum/release-burndown">Mountain Goat Software</a>\&rsquo;s explanation.</p></li>
<li><p><a href="http://joel.inpointform.net/software-development/burn-down-charts-tutorial-simple-agile-project-tracking/">A good explanation</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Made This Website]]></title>
    <link href="http://Marekje.github.io/blog/2014/07/18/how-i-made-this-website/"/>
    <updated>2014-07-18T08:24:15+02:00</updated>
    <id>http://Marekje.github.io/blog/2014/07/18/how-i-made-this-website</id>
    <content type="html"><![CDATA[<p>It took me a while to be able to make this blog happen.</p>

<p>First, I did it with wordpress, and it worked like a charm, but wordpress&rsquo;s clumsy and huge and hardly modifiable. So I wanted to change.</p>

<p>Through <a href="http://oozled.com/resources/cms">oozled.com</a>, I found jekyll, whose <em>&ldquo;static website&rdquo;</em> appealed to me because it meant something simple without a database. I&rsquo;m no developer&hellip;</p>

<p>But I couldn&rsquo;t install Jekyll, thanks to a missing gem and some other stuff. But Octopress, a blog engine based on Jekyll, worked! 10 minutes and I was all set up.</p>

<h2>How I did it:</h2>

<p>First, create your <code>username.github.io</code> repository in github.
&ndash; Second, follow that :
<a href="http://octopress.org/docs/setup/">octopress: setup</a></p>

<ul>
<li><p>Third, follow that :
<a href="http://octopress.org/docs/deploying/github/">octopress: deploying to github pages</a></p></li>
<li><p>Fourth :
<a href="http://octopress.org/docs/configuring/">octopress: configuration</a>(almost nothing to do here!)</p></li>
<li><p>and last :
<a href="http://octopress.org/docs/blogging/">octopress: blogging basics</a>, which will help you make a blog post.</p></li>
</ul>


<p>And then, to <code>push</code> a new blog post, or any changes I guess :</p>

<ul>
<li><code>rake generate</code></li>
<li><code>rake deploy</code></li>
</ul>


<h2>Modifying/Customizing your blog:</h2>

<ul>
<li><a href="http://octopress.org/docs/theme/template/">Theming &amp; Customization</a></li>
<li><a href="http://octopress.org/docs/theme/styles/">CSS Styles</a></li>
</ul>


<p>I think that&rsquo;s all I/you need :&ndash;)</p>
]]></content>
  </entry>
  
</feed>
